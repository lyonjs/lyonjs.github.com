// todo: it's a mess, clean this.
// also, it'll probably break on non ES5 browser too
(function($, Raphael, location, exports) {
  var anims = [
    [{rotation: 360}, 2000],
    [{fill: '#bada55'}, 4000],
    [{scale: 2}, 1000, function() {
      this.animate({scale: 1}, 2000);
    }],
  ],

  // these are icons for twitter/github in footers
  // credits to raphael: http://raphaeljs.com/icons/
  icons = {
    twitter: "M23.295,22.567h-7.213c-2.125,0-4.103-2.215-4.103-4.736v-1.829h11.232c1.817,0,3.291-1.469,3.291-3.281c0-1.813-1.474-3.282-3.291-3.282H11.979V6.198c0-1.835-1.375-3.323-3.192-3.323c-1.816,0-3.29,1.488-3.29,3.323v11.633c0,6.23,4.685,11.274,10.476,11.274h7.211c1.818,0,3.318-1.463,3.318-3.298S25.112,22.567,23.295,22.567z",
    github: "M28.436,15.099c-1.201-0.202-2.451-0.335-3.466-0.371l-0.179-0.006c0.041-0.09,0.072-0.151,0.082-0.16c0.022-0.018,0.04-0.094,0.042-0.168c0-0.041,0.018-0.174,0.046-0.35c0.275,0.01,0.64,0.018,1.038,0.021c1.537,0.012,3.145,0.136,4.248,0.331c0.657,0.116,0.874,0.112,0.389-0.006c-0.491-0.119-1.947-0.294-3.107-0.37c-0.779-0.053-1.896-0.073-2.554-0.062c0.019-0.114,0.041-0.241,0.064-0.371c0.093-0.503,0.124-1.009,0.126-2.016c0.002-1.562-0.082-1.992-0.591-3.025c-0.207-0.422-0.441-0.78-0.724-1.104c0.247-0.729,0.241-1.858-0.015-2.848c-0.211-0.812-0.285-0.864-1.021-0.708C22.19,4.019,21.69,4.2,21.049,4.523c-0.303,0.153-0.721,0.391-1.024,0.578c-0.79-0.278-1.607-0.462-2.479-0.561c-0.884-0.1-3.051-0.044-3.82,0.098c-0.752,0.139-1.429,0.309-2.042,0.511c-0.306-0.189-0.75-0.444-1.067-0.604C9.973,4.221,9.473,4.041,8.847,3.908c-0.734-0.157-0.81-0.104-1.02,0.708c-0.26,1.003-0.262,2.151-0.005,2.878C7.852,7.577,7.87,7.636,7.877,7.682c-1.042,1.312-1.382,2.78-1.156,4.829c0.059,0.534,0.15,1.024,0.277,1.473c-0.665-0.004-1.611,0.02-2.294,0.064c-1.162,0.077-2.618,0.25-3.109,0.369c-0.484,0.118-0.269,0.122,0.389,0.007c1.103-0.194,2.712-0.32,4.248-0.331c0.29-0.001,0.561-0.007,0.794-0.013c0.07,0.237,0.15,0.463,0.241,0.678L7.26,14.759c-1.015,0.035-2.264,0.168-3.465,0.37c-0.901,0.151-2.231,0.453-2.386,0.54c-0.163,0.091-0.03,0.071,0.668-0.106c1.273-0.322,2.928-0.569,4.978-0.741l0.229-0.02c0.44,1.022,1.118,1.802,2.076,2.41c0.586,0.373,1.525,0.756,1.998,0.816c0.13,0.016,0.508,0.094,0.84,0.172c0.333,0.078,0.984,0.195,1.446,0.262h0.011c-0.009,0.006-0.017,0.01-0.025,0.016c-0.56,0.291-0.924,0.744-1.169,1.457c-0.11,0.033-0.247,0.078-0.395,0.129c-0.529,0.18-0.735,0.217-1.271,0.221c-0.556,0.004-0.688-0.02-1.02-0.176c-0.483-0.225-0.933-0.639-1.233-1.133c-0.501-0.826-1.367-1.41-2.089-1.41c-0.617,0-0.734,0.25-0.288,0.615c0.672,0.549,1.174,1.109,1.38,1.537c0.116,0.24,0.294,0.611,0.397,0.824c0.109,0.227,0.342,0.535,0.564,0.748c0.522,0.498,1.026,0.736,1.778,0.848c0.504,0.074,0.628,0.074,1.223-0.002c0.287-0.035,0.529-0.076,0.746-0.127c0,0.244,0,0.525,0,0.855c0,1.766-0.021,2.334-0.091,2.5c-0.132,0.316-0.428,0.641-0.716,0.787c-0.287,0.146-0.376,0.307-0.255,0.455c0.067,0.08,0.196,0.094,0.629,0.066c0.822-0.051,1.403-0.355,1.699-0.891c0.095-0.172,0.117-0.518,0.147-2.318c0.032-1.953,0.046-2.141,0.173-2.42c0.077-0.166,0.188-0.346,0.25-0.395c0.104-0.086,0.111,0.084,0.111,2.42c-0.001,2.578-0.027,2.889-0.285,3.385c-0.058,0.113-0.168,0.26-0.245,0.33c-0.135,0.123-0.192,0.438-0.098,0.533c0.155,0.154,0.932-0.088,1.356-0.422c0.722-0.572,0.808-1.045,0.814-4.461l0.003-2.004l0.219,0.021l0.219,0.02l0.036,2.621c0.041,2.951,0.047,2.994,0.549,3.564c0.285,0.322,0.572,0.5,1.039,0.639c0.625,0.188,0.813-0.102,0.393-0.605c-0.457-0.547-0.479-0.756-0.454-3.994c0.017-2.076,0.017-2.076,0.151-1.955c0.282,0.256,0.336,0.676,0.336,2.623c0,2.418,0.069,2.648,0.923,3.07c0.399,0.195,0.511,0.219,1.022,0.221c0.544,0.002,0.577-0.006,0.597-0.148c0.017-0.115-0.05-0.193-0.304-0.348c-0.333-0.205-0.564-0.467-0.709-0.797c-0.055-0.127-0.092-0.959-0.117-2.672c-0.036-2.393-0.044-2.502-0.193-2.877c-0.201-0.504-0.508-0.902-0.897-1.166c-0.101-0.066-0.202-0.121-0.333-0.162c0.161-0.016,0.317-0.033,0.468-0.055c1.572-0.209,2.403-0.383,3.07-0.641c1.411-0.543,2.365-1.445,2.882-2.724c0.046-0.114,0.092-0.222,0.131-0.309l0.398,0.033c2.051,0.173,3.706,0.42,4.979,0.743c0.698,0.177,0.831,0.198,0.668,0.105C30.666,15.551,29.336,15.25,28.436,15.099z M22.422,15.068c-0.233,0.512-0.883,1.17-1.408,1.428c-0.518,0.256-1.33,0.451-2.25,0.544c-0.629,0.064-4.137,0.083-4.716,0.026c-1.917-0.188-2.991-0.557-3.783-1.296c-0.75-0.702-1.1-1.655-1.039-2.828c0.039-0.734,0.216-1.195,0.679-1.755c0.421-0.51,0.864-0.825,1.386-0.985c0.437-0.134,1.778-0.146,3.581-0.03c0.797,0.051,1.456,0.051,2.252,0c1.886-0.119,3.145-0.106,3.61,0.038c0.731,0.226,1.397,0.834,1.797,1.644c0.18,0.362,0.215,0.516,0.241,1.075C22.808,13.699,22.675,14.517,22.422,15.068z M12.912,11.762c-1.073-0.188-1.686,1.649-0.863,2.587c0.391,0.445,0.738,0.518,1.172,0.248c0.402-0.251,0.62-0.72,0.62-1.328C13.841,12.458,13.472,11.862,12.912,11.762z M19.425,11.872c-1.073-0.188-1.687,1.647-0.864,2.586c0.392,0.445,0.738,0.519,1.173,0.247c0.401-0.25,0.62-0.72,0.62-1.328C20.354,12.569,19.985,11.971,19.425,11.872z M16.539,15.484c-0.023,0.074-0.135,0.184-0.248,0.243c-0.286,0.147-0.492,0.096-0.794-0.179c-0.187-0.169-0.272-0.258-0.329-0.081c-0.053,0.164,0.28,0.493,0.537,0.594c0.236,0.094,0.405,0.097,0.661-0.01c0.254-0.106,0.476-0.391,0.476-0.576C16.842,15.303,16.595,15.311,16.539,15.484zM16.222,14.909c0.163-0.144,0.2-0.44,0.044-0.597s-0.473-0.133-0.597,0.043c-0.144,0.206-0.067,0.363,0.036,0.53C15.865,15.009,16.08,15.034,16.222,14.909z"
  },

  // these are the fancy animations on svg paths, randomly rendered.
  hovers = [
    [{rotation: 360}, 2000],
    [{fill: '#fefefe'}, 2000],
    [{fill: '#fefefe'}, 2000],
    [{scale: 4}, 2000],
    [{'fill-opacity': 0}, 1000],
    [{'fill-opacity': 0}, 10000],
    [{scale: 4}, 2000, function() {
      this.animate({scale: 1});
    }],
    [{path: 'm 330.03722,265.51857 c -1.76775,-0.7133 -1.55344,-5.89142 0.32143,-7.76629 0.86428,-0.86429 3.14387,-1.57143 5.06574,-1.57143 1.92187,0 4.40299,-0.48631 5.51359,-1.08068 2.25372,-1.20616 5.79343,-8.24559 5.82728,-11.58873 0.0121,-1.19317 -4.92804,-14.37169 -10.97804,-29.28559 -6.05,-14.9139 -11,-27.75477 -11,-28.53528 0,-1.8327 6.48145,-3.07817 9.85138,-1.89303 2.17898,0.76631 3.7185,3.82114 10.62503,21.08302 4.44226,11.10278 8.32158,20.43161 8.62071,20.73074 0.29913,0.29914 4.05277,-8.33784 8.34141,-19.19328 4.28864,-10.85545 8.69427,-20.52467 9.79029,-21.48717 3.03809,-2.668 11.77118,-2.01216 11.77118,0.884 0,2.5645 -28.06355,70.80458 -30.68083,74.60431 -1.71795,2.49411 -3.7805,4.07317 -6.19707,4.74442 -3.70924,1.03032 -14.62907,1.26007 -16.8721,0.35499 z m -53.1124,-18.41433 c -4.59669,-0.90353 -10.21278,-4.57545 -12.60277,-8.23997 -4.27885,-6.56066 -3.77088,-18.06303 1.07848,-24.42087 4.60395,-6.03608 14.72129,-9.19136 29.63669,-9.24274 6.25354,-0.0215 6.78043,-0.66416 4.55294,-5.55297 -2.86377,-6.28528 -14.55698,-8.25533 -26.0396,-4.38711 -5.88222,1.98157 -6.23469,1.99615 -7.46846,0.30887 -1.64377,-2.248 -1.66601,-6.52442 -0.0449,-8.62948 3.13898,-4.07601 22.21774,-6.393 31.55667,-3.83236 5.73646,1.57288 11.43668,6.90681 14.24712,13.3316 2.08327,4.76245 2.33375,7.12105 2.73992,25.79984 0.39901,18.34968 0.26529,20.73994 -1.24477,22.25 -3.21872,3.21873 -12.54894,1.43891 -12.54894,-2.39382 0,-0.51852 -1.72744,0.20041 -3.83876,1.59761 -2.11584,1.4002 -6.49186,2.97485 -9.75,3.5084 -3.25118,0.53241 -5.91124,0.92133 -5.91124,0.86425 0,-0.0571 -1.96308,-0.48964 -4.3624,-0.96125 z m 15.85308,-12.77873 c 4.07712,-2.18658 8.00932,-8.96269 8.00932,-13.80194 l 0,-3.34272 -8.53212,0 c -12.99747,0 -17.50849,2.63484 -17.43608,10.18426 0.0538,5.60509 3.78833,8.73463 10.4838,8.78533 2.20858,0.0167 5.57237,-0.80449 7.47508,-1.82493 z m -59.41925,10.28391 c -1.31382,-1.31382 -1.57143,-4.56461 -1.57143,-19.82981 l 0,-18.25838 -11.84626,-17.48959 c -6.51545,-9.61927 -12.14902,-18.69586 -12.51906,-20.17019 -0.67192,-2.67715 -0.66535,-2.68057 5.09627,-2.65836 3.95302,0.0152 6.43807,0.56611 7.89434,1.75 1.16891,0.95027 5.7903,7.24026 10.26975,13.97776 4.47945,6.7375 8.35168,12.25 8.60496,12.25 0.25328,0 4.12551,-5.5125 8.60496,-12.25 4.47945,-6.7375 9.10084,-13.02749 10.26975,-13.97776 2.57524,-2.09355 13.21521,-2.50248 13.87166,-0.53313 0.22717,0.68151 -5.36033,9.7555 -12.41667,20.16441 l -12.8297,18.9253 0,18.26416 c 0,15.27045 -0.25758,18.52174 -1.57143,19.83559 -2.08419,2.08419 -9.77296,2.08419 -11.85714,0 z m 169,0 c -1.03746,-1.03746 -1.57143,-3.39177 -1.57143,-6.92857 0,-3.5368 0.53397,-5.89111 1.57143,-6.92857 1.9624,-1.96241 8.09287,-2.04999 10,-0.14286 1.92714,1.92714 1.92714,12.21572 0,14.14286 -1.90713,1.90712 -8.0376,1.81955 -10,-0.14286 z m 1.42857,-24.40728 c -1.83309,-1.15861 -2.7708,-12.56273 -2.90606,-35.34272 -0.1089,-18.34088 0.0327,-18.67857 7.83463,-18.67857 l 5.07143,0 0,24.35078 c 0,27.85366 -0.48947,30.65751 -5.34783,30.63391 -1.73369,-0.008 -3.82717,-0.44195 -4.65217,-0.9634 z'}, 1000]
  ];

  $(function() {

    // these are the few dom elements we'll need
    var logoSvg = $('#logo-svg')[0],
      logo = $('#logo')[0],
      desc = $('.eb-description'),
      nextEvent = $('.eb-next-event');

    if(!logoSvg) return;

    // grab the main svg document from html (within script tag with unknown type, wont render)
    // then parse its content and get an array of path hash object, with path/attr property
    // that we could script later on.
    var svg = logoSvg.innerHTML
      // >< whitespace cleanr ><
      .replace(/>[\s]+</g, '><')
      .replace(/[\s]+/g, ' ')
      // get an array of path hash object, with path/attr property
      .match(/<(path[^\/]+)\/>/g)
        .map(function(el) {
          var m = el.match(/<path d="([^"]+).+style="([^"]+).+/),
          attr = {},
          am = m[2].split(';').forEach(function(el) {
            var m = el.split(':');
            attr[m[0]] = m[1];
          });

          return {
            path: m[1],
            attr: attr
          }
        });

    // draw the svg
    var paper = new Raphael(logo, '100%', '100%'),
      anim = anims[Math.floor(Math.random() * anims.length)],
      // randomize the animations, except from some yay...
      hover = /yay/.test(location.hash) ? hovers[hovers.length - 1] : hovers[Math.floor(Math.random() * hovers.length)],
      animated = function animated() { this._animated = false; },
      rd = function rd()  {return Math.floor(Math.random() * 600); };

    svg.forEach(function(node) {
      node.attr.stroke = 'transparent';

      var p = paper.path(node.path).attr(node.attr)
        .hover(function() {
          if(this._animated) return;
          this._animated = true;

          var path = hover[0].path;

          if(path) {
            path = path
              .replace(/m (\d+\.\d+),(\d+\.\d+)/g, function() {
                return 'm ' + (128 + rd()) + '.' + rd()  + ',' + (100 + rd()) + '.' + rd();
              });

            return this.animate.call(this, {path: path}, hover[1], animated);
          }

          this.animate.apply(this, hover.concat(animated));
        });
    });

  });

  $(function() {

    // draw icons
    $.each(icons, function(c) {
      new Raphael($('.' + c)[0], 26, 27).path(icons[c]).attr({
        fill: '#333',
        stroke: 'transparent',
        opacity: 0.5,
        scale: 0.8
      });
    });
  });

})(this.jQuery, this.Raphael, this.location, this);
